// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain_user "github.com/felixa1996/go_next_be/app/domain/user"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) Create(_a0 context.Context, _a1 domain_user.User) (domain_user.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain_user.User
	if rf, ok := ret.Get(0).(func(context.Context, domain_user.User) domain_user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain_user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain_user.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) FindOne(_a0 context.Context, _a1 string) (domain_user.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain_user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain_user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain_user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPagination provides a mock function with given fields: _a0
func (_m *UserRepository) FindPagination(_a0 context.Context) ([]domain_user.User, error) {
	ret := _m.Called(_a0)

	var r0 []domain_user.User
	if rf, ok := ret.Get(0).(func(context.Context) []domain_user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserRepository) Update(_a0 context.Context, _a1 domain_user.User) (domain_user.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain_user.User
	if rf, ok := ret.Get(0).(func(context.Context, domain_user.User) domain_user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain_user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain_user.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
